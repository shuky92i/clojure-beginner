; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"0.9.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.27.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉rest-demo.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉rest-demo.core꞉> 
4
clj꞉rest-demo.core꞉> 
4
clj꞉rest-demo.core꞉> 
4
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> 
12
clj꞉rest-demo.core꞉> (* 3 4)
12
clj꞉rest-demo.core꞉> 
(println "hw")
hw
nil
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> 
"Hello, World!"
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> 
#function[clojure.core/str]
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> (-main)
Hello, World!xe
nil
clj꞉rest-demo.core꞉> (-main 44)
Hello, World!xe
nil
clj꞉rest-demo.core꞉> (-main)
Hello, World!xe
nil
clj꞉rest-demo.core꞉> (-main)
Hello, World!xe
nil
clj꞉rest-demo.core꞉> 
(-main 444)
Hello, World!xe
nil
clj꞉rest-demo.core꞉> (-main)
Hello, World!xe
nil
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> (-main)
; Execution error (ArityException) at rest-demo.core/eval7754 (form-init17222201022535925180.clj:71).
; Wrong number of args (0) passed to: rest-demo.core/-main
clj꞉rest-demo.core꞉> (-main 44)
Hello world! 44
nil
clj꞉rest-demo.core꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> (-main 55)
Hello, World!xe 55
nil
clj꞉rest-demo.core꞉> 
#'rest-demo.functions/-main
clj꞉rest-demo.functions꞉> (-main)
My name is shuky
Loving clojure so far
7
clj꞉rest-demo.functions꞉> 
#'rest-demo.core/-main
clj꞉rest-demo.core꞉> (-main)
; Execution error (ArityException) at rest-demo.core/eval7779 (form-init17222201022535925180.clj:90).
; Wrong number of args (0) passed to: rest-demo.core/-main
clj꞉rest-demo.core꞉> (-main 4)
Hello, World!xe 4
nil
clj꞉rest-demo.core꞉> 
#'rest-demo.functions/-main
clj꞉rest-demo.functions꞉> (-main)
My name is shuky
Loving clojure so far
7
clj꞉rest-demo.functions꞉> (-main)
My name is shuky
Loving clojure so far
7
clj꞉rest-demo.functions꞉> #(println "Hello")
#function[rest-demo.functions/eval7790/fn--7791]
clj꞉rest-demo.functions꞉> #(println "Hello" %) "Shuk"
"Shuk"
clj꞉rest-demo.functions꞉> 
#function[rest-demo.functions/eval7796/fn--7797]
clj꞉rest-demo.functions꞉> #(println "Hello" %) "shuk"
"shuk"
clj꞉rest-demo.functions꞉> (#(println "Hello"))
Hello
nil
clj꞉rest-demo.functions꞉> (#(println "Hello" %) "shuk")
Hello shuk
nil
clj꞉rest-demo.functions꞉> 
; Syntax error compiling at (functions.clj:17:3).
; Unable to resolve symbol: increment in this context
clj꞉rest-demo.functions꞉> (increment_set)
; Execution error (IllegalStateException) at rest-demo.functions/eval7810 (form-init17222201022535925180.clj:123).
; Attempting to call unbound fn: #'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
; Syntax error compiling at (functions.clj:17:3).
; Unable to resolve symbol: increment in this context
clj꞉rest-demo.functions꞉> 
; Syntax error compiling at (functions.clj:17:3).
; Unable to resolve symbol: increment in this context
clj꞉rest-demo.functions꞉> 
; Syntax error compiling at (functions.clj:17:3).
; Unable to resolve symbol: increment in this context
clj꞉rest-demo.functions꞉> 
; Syntax error compiling at (functions.clj:17:3).
; Unable to resolve symbol: increment in this context
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> (increment_set)
(2 3 5)
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> (increment_set)
(2 3 4)
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> (increment_set [1 2 3 4])
(2 3 4 5)
clj꞉rest-demo.functions꞉> 
; Syntax error compiling at (functions.clj:24:1).
; Unable to resolve symbol: DataTypes in this context
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> ()
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/increment_set
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
1
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
1.25
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
1.25
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
1.25
1.25E-12
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
1.25
1.25E-12
64508
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
1.25
1.25E-12
64508
nil
true
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
; WARNING: float already refers to: #'clojure.core/float in namespace: rest-demo.functions, being replaced by: #'rest-demo.functions/float
clj꞉rest-demo.functions꞉> 
1
1.25
1.25E-12
64508
nil
true
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
1.25
1.25E-12
64508
nil
true
Hello
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
; WARNING: keyword already refers to: #'clojure.core/keyword in namespace: rest-demo.functions, being replaced by: #'rest-demo.functions/keyword
clj꞉rest-demo.functions꞉> 
1
1.25
1.25E-12
64508
nil
true
Hello
thanks
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
2
1.25
1.25E-12
64508
nil
true
Hello
thanks
nil
clj꞉rest-demo.functions꞉> 
#'rest-demo.functions/DataTypes
clj꞉rest-demo.functions꞉> 
1
1.25
1.25E-12
64508
nil
true
Hello
thanks
true
false
nil
clj꞉rest-demo.functions꞉> 
nil
clj꞉rest-demo.petstore꞉> 
; Syntax error compiling at (petstore.clj:17:1).
; Unable to resolve symbol: age in this context
clj꞉rest-demo.petstore꞉> 
#'rest-demo.petstore/petToHumanAge
clj꞉rest-demo.petstore꞉> 
#'rest-demo.petstore/age
clj꞉rest-demo.petstore꞉> 
Fido is 28 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
Bubbles is 100 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
Bubbles is 100 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
Fido is 28 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
Fifi is 10 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
Bubbles is 100 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
nil
clj꞉rest-demo.petstore꞉> 



































Fido is 28 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
Fifi is 10 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
Bubbles is 100 years old in human years
nil
clj꞉rest-demo.petstore꞉> 
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondIf
clj꞉rest-demo.conditionals꞉> 

CondIf:
Equal
nil
clj꞉rest-demo.conditionals꞉> 

CondIf:
Equal
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondIf
clj꞉rest-demo.conditionals꞉> 

CondIf:
Not Equal
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondIf
clj꞉rest-demo.conditionals꞉> 

CondIf:
Not Equal
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondIf
clj꞉rest-demo.conditionals꞉> 

CondIf:
Equal
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondIfDo
clj꞉rest-demo.conditionals꞉> 

CondIfDo:
Equal first statement
Second statement
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondIfDo
clj꞉rest-demo.conditionals꞉> 

CondIfDo:
Not equal first statement
Second statment
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondNestedIf
clj꞉rest-demo.conditionals꞉> 

NestedIf:
False
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondNestedIf
clj꞉rest-demo.conditionals꞉> 

NestedIf:
True
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondCase
clj꞉rest-demo.conditionals꞉> 

CondCase:
I have a dog
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondCase
clj꞉rest-demo.conditionals꞉> 

CondCase:
I have a dog
nil
clj꞉rest-demo.conditionals꞉> 

CondCase:
I have a cat
nil
clj꞉rest-demo.conditionals꞉> 

CondCase:
I have a goldfish
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondCond
clj꞉rest-demo.conditionals꞉> 
Several
nil
clj꞉rest-demo.conditionals꞉> 
Few
nil
clj꞉rest-demo.conditionals꞉> 
Loads
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.conditionals/CondCond
clj꞉rest-demo.conditionals꞉> 

CondCase:
Loads
nil
clj꞉rest-demo.conditionals꞉> 

CondCase:
Loads
nil
clj꞉rest-demo.conditionals꞉> 

CondCase:
Many
nil
clj꞉rest-demo.conditionals꞉> 
#'rest-demo.loops/Loop
clj꞉rest-demo.loops꞉> 

Loop:
0
1
2
3
4
5
6
7
8
9
nil
clj꞉rest-demo.loops꞉> 
#'rest-demo.loops/DoTimes
clj꞉rest-demo.loops꞉> 

DoTimes:
0
1
2
3
4
5
6
7
8
9
nil
clj꞉rest-demo.loops꞉> 
#'rest-demo.loops/WhileDo
clj꞉rest-demo.loops꞉> 

WhileDo:
0
1
2
3
4
5
6
7
8
9
nil
clj꞉rest-demo.loops꞉> 
#'rest-demo.loops/WhileDo
clj꞉rest-demo.loops꞉> 

WhileDo:
-20
-19
-18
-17
-16
-15
-14
-13
-12
-11
-10
-9
-8
-7
-6
-5
-4
-3
-2
-1
0
1
2
3
4
5
6
7
8
9
nil
clj꞉rest-demo.loops꞉> 
#'rest-demo.loops/WhileDo
clj꞉rest-demo.loops꞉> 

WhileDo:
0
1
2
3
4
5
6
7
8
9
nil
clj꞉rest-demo.loops꞉> 
#'rest-demo.loops/DoSeq
clj꞉rest-demo.loops꞉> 

DoSeq:
7
4
6
8
9
6
4
nil
clj꞉rest-demo.loops꞉> 
#'rest-demo.atoms/Atoms
clj꞉rest-demo.atoms꞉> 
100
nil
clj꞉rest-demo.atoms꞉> 
#'rest-demo.atoms/Atoms
clj꞉rest-demo.atoms꞉> 
100
101
nil
clj꞉rest-demo.atoms꞉> 
#'rest-demo.atoms/Atoms
clj꞉rest-demo.atoms꞉> 
100
101
110
nil
clj꞉rest-demo.atoms꞉> 
#'rest-demo.atoms/Atoms
clj꞉rest-demo.atoms꞉> 
100
101
110
; Execution error (ClassCastException) at rest-demo.atoms/Atoms (form-init17222201022535925180.clj:14).
; class java.lang.Long cannot be cast to class clojure.lang.IAtom (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IAtom is in unnamed module of loader 'app')
clj꞉rest-demo.atoms꞉> 
#'rest-demo.atoms/Atoms
clj꞉rest-demo.atoms꞉> 
100
101
110
; Execution error (ClassCastException) at rest-demo.atoms/Atoms (form-init17222201022535925180.clj:14).
; class java.lang.Long cannot be cast to class clojure.lang.IAtom (java.lang.Long is in module java.base of loader 'bootstrap'; clojure.lang.IAtom is in unnamed module of loader 'app')
clj꞉rest-demo.atoms꞉> 
#'rest-demo.atoms/Atoms
clj꞉rest-demo.atoms꞉> 
100
101
110
120
nil
clj꞉rest-demo.atoms꞉> 
#'rest-demo.atoms/Atoms
clj꞉rest-demo.atoms꞉> 
100
101
110
120
120
nil
clj꞉rest-demo.atoms꞉> 
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow  red green blue)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
(red green blue black white)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
(red green blue black white)
(1 2 3 5 4)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
(red green blue black white)
(1 2 3 5 4)
(blue green red)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
(red green blue black white)
(1 2 3 5 4)
(blue green red)
red
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
(red green blue black white)
(1 2 3 5 4)
(blue green red)
red
(green blue)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
(red green blue black white)
(1 2 3 5 4)
(blue green red)
red
(green blue)
blue
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.sequences/Seq
clj꞉rest-demo.sequences꞉> 
(red green blue)
(yellow red green blue)
((red green blue) y e l l o w)
(yellow red green blue)
[red green blue yellow]
(red green blue black white)
(1 2 3 5 4)
(blue green red)
red
(green blue)
blue
(-1 1 2 3 3 8 55 67)
nil
clj꞉rest-demo.sequences꞉> 
#'rest-demo.struct-maps/Pets
clj꞉rest-demo.struct-maps꞉> 
{:PetType dog, :PetName Fido}
nil
clj꞉rest-demo.struct-maps꞉> 
#'rest-demo.struct-maps/Pets
clj꞉rest-demo.struct-maps꞉> 
{:PetType dog, :PetName Fido}
{:PetType cat, :PetName fifi}
nil
clj꞉rest-demo.struct-maps꞉> 
#'rest-demo.struct-maps/Pets
clj꞉rest-demo.struct-maps꞉> 
{:PetType dog, :PetName Fido}
{:PetType cat, :PetName fifi}
fifi
cat
nil
clj꞉rest-demo.struct-maps꞉> 
#'rest-demo.struct-maps/Pets
clj꞉rest-demo.struct-maps꞉> 
{:PetType dog, :PetName Fido}
{:PetType cat, :PetName fifi}
fifi
cat
{:PetType dog, :PetName max}
nil
clj꞉rest-demo.struct-maps꞉> 
#'rest-demo.struct-maps/Pets
clj꞉rest-demo.struct-maps꞉> 
{:PetType dog, :PetName Fido}
{:PetType cat, :PetName fifi}
fifi
cat
{:PetType dog, :PetName max}
{:PetType cat, :PetName fifi, :PetAge 10}
nil
clj꞉rest-demo.struct-maps꞉> 
#'rest-demo.destructuring/Destruct
clj꞉rest-demo.destructuring꞉> 
1 2 3
nil
clj꞉rest-demo.destructuring꞉> 
#'rest-demo.destructuring/Destruct
clj꞉rest-demo.destructuring꞉> 
1 2 3
1 2 (3 4)
nil
clj꞉rest-demo.destructuring꞉> 
#'rest-demo.destructuring/Destruct
clj꞉rest-demo.destructuring꞉> 
1 2 3
1 2 (3 4 5)
nil
clj꞉rest-demo.destructuring꞉> 
#'rest-demo.destructuring/Destruct
clj꞉rest-demo.destructuring꞉> 
1 2 3
1 2 (3 4 5)
John Smith
nil
clj꞉rest-demo.destructuring꞉> 
#'rest-demo.destructuring/Destruct
clj꞉rest-demo.destructuring꞉> 
1 2 3
1 2 (3 4 5)
John Smith
John nil
nil
clj꞉rest-demo.destructuring꞉> 
#'rest-demo.exceptions/ExHandling
clj꞉rest-demo.exceptions꞉> 
4
clj꞉rest-demo.exceptions꞉> 
; Execution error (ClassCastException) at rest-demo.exceptions/ExHandling (form-init17222201022535925180.clj:5).
; class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
clj꞉rest-demo.exceptions꞉> 
; Syntax error compiling at (exceptions.clj:5:3).
; Unable to resolve symbol: catch in this context
clj꞉rest-demo.exceptions꞉> 
#'rest-demo.exceptions/ExHandling
clj꞉rest-demo.exceptions꞉> 
Caught exception
nil
clj꞉rest-demo.exceptions꞉> 
#'rest-demo.exceptions/ExHandling
clj꞉rest-demo.exceptions꞉> 
Caught exception: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
nil
clj꞉rest-demo.exceptions꞉> 
#'rest-demo.exceptions/ExHandling
clj꞉rest-demo.exceptions꞉> 
Caught exception: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
nil
clj꞉rest-demo.exceptions꞉> 
#'rest-demo.exceptions/ExHandling
clj꞉rest-demo.exceptions꞉> 
Caught exception: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
nil
clj꞉rest-demo.exceptions꞉> 
#'rest-demo.exceptions/ExHandling
clj꞉rest-demo.exceptions꞉> 
Caught exception: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')
Clearnup and move on..
nil
clj꞉rest-demo.exceptions꞉> 
#'rest-demo.CarDealership/IsCodeValid
clj꞉rest-demo.CarDealership꞉> 
false
clj꞉rest-demo.CarDealership꞉> 
true
clj꞉rest-demo.CarDealership꞉> 
false
clj꞉rest-demo.CarDealership꞉> 
#'rest-demo.CarDealership/GetCarPrices
clj꞉rest-demo.CarDealership꞉> 
The code is invalid
nil
clj꞉rest-demo.CarDealership꞉> 
The code is valid
nil
clj꞉rest-demo.CarDealership꞉> 
#'rest-demo.namespaces/-main
clj꞉rest-demo.namespaces꞉> 
Hello
nil
clj꞉rest-demo.namespaces꞉> 
#'rest-demo.namespaces/-main
clj꞉rest-demo.namespaces꞉> 
Hello
nil
clj꞉rest-demo.namespaces꞉> 
; Syntax error compiling at (namespaces.clj:7:12).
; Unable to resolve symbol: capitalize in this context
clj꞉rest-demo.namespaces꞉> 
; Syntax error compiling at (namespaces.clj:7:12).
; Unable to resolve symbol: capitalize in this context
clj꞉rest-demo.namespaces꞉> 
; Syntax error compiling at (namespaces.clj:7:12).
; Unable to resolve symbol: capitalize in this context
clj꞉rest-demo.namespaces꞉> 
; Syntax error compiling at (namespaces.clj:7:12).
; Unable to resolve symbol: capitalize in this context
clj꞉rest-demo.namespaces꞉> 
Hello
nil
clj꞉rest-demo.namespaces꞉> 
; Syntax error compiling at (namespaces.clj:7:12).
; Unable to resolve symbol: capitalize in this context
clj꞉rest-demo.namespaces꞉> 
; Syntax error compiling at (namespaces.clj:7:12).
; Unable to resolve symbol: capitalize in this context
clj꞉rest-demo.namespaces꞉> 
; Syntax error compiling at (namespaces.clj:7:12).
; Unable to resolve symbol: capitalize in this context
clj꞉rest-demo.namespaces꞉> 
#'rest-demo.namespaces/-main
clj꞉rest-demo.namespaces꞉> 
Hello
nil
clj꞉rest-demo.namespaces꞉> (macroexpand-1 '(when true (println "hello")))
(if true (do (println "hello")))
clj꞉rest-demo.macros꞉> 
#'rest-demo.watchers/Watch
clj꞉rest-demo.watchers꞉> 
#atom[5 0x793936a0]
clj꞉rest-demo.watchers꞉> 
#'rest-demo.watchers/Watch
clj꞉rest-demo.watchers꞉> 
:xWatcher
#atom[10 0x7f65e757]
5
10
10
clj꞉rest-demo.watchers꞉> 
#'rest-demo.watchers/Watch
clj꞉rest-demo.watchers꞉> 
:xWatcher
#atom[10 0x11a5aee2]
5
10
15
clj꞉rest-demo.watchers꞉> 
